import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (–µ—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
NAME, PHONE, TIME, ADDRESS, FORMAT_STATE, COMMENT, CONFIRM, CHOOSE_FIELD, NEW_VALUE = range(9)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –∑–∞—è–≤–∫–∏ –∏–∑ user_data
def compose_summary(user_data: dict, prefix: str = "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n") -> str:
    name = user_data.get('name')
    phone = user_data.get('phone')
    time = user_data.get('time')
    address = user_data.get('address')
    format_label = user_data.get('format_label')
    format_price = user_data.get('format_price')
    comment = user_data.get('comment') or ''
    # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, —É–∫–∞–∑—ã–≤–∞–µ–º "–Ω–µ—Ç"
    comment_display = comment if comment and comment.strip() else "–Ω–µ—Ç"
    summary_text = (
        f"{prefix}"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {time}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–§–æ—Ä–º–∞—Ç: {format_label} ‚Äî {format_price}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_display}"
    )
    return summary_text

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    intro_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ XENON PRIVE.\n"
        "–≠—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫—Å–µ–Ω–æ–Ω–æ–≤—ã—Ö –∏–Ω–≥–∞–ª—è—Ü–∏–π."
    )
    # –ö–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (InlineKeyboard)
    keyboard = [
        [InlineKeyboardButton(" –û XENON PRIVE", callback_data="about")],
        [InlineKeyboardButton(" –ß—Ç–æ –¥–∞—ë—Ç –∏–Ω–≥–∞–ª—è—Ü–∏—è", callback_data="benefits")],
        [InlineKeyboardButton(" –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç", callback_data="choose_format")],
        [InlineKeyboardButton(" –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="signup")],
        [InlineKeyboardButton(" –ö–∞–Ω–∞–ª", url="https://t.me/xenox40")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(intro_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–û XENON PRIVE"
async def about_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    about_text = (
        "XENON PRIVE ‚Äî –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫—Å–µ–Ω–æ–Ω–æ–≤—ã—Ö –∏–Ω–≥–∞–ª—è—Ü–∏–π (40% –∫—Å–µ–Ω–æ–Ω–∞ / 60% –∫–∏—Å–ª–æ—Ä–æ–¥–∞). "
        "–ö–∞–∂–¥–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥–ª—É–±–æ–∫—É—é —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—é, —Å–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è. "
        "–ò–Ω–≥–∞–ª—è—Ü–∏–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ. "
        "–°–æ–≤–º–µ—â–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, XENON PRIVE –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –æ–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ."
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –º–µ–Ω—é –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ
    await query.message.reply_text(about_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–ß—Ç–æ –¥–∞—ë—Ç –∏–Ω–≥–∞–ª—è—Ü–∏—è"
async def benefits_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    benefits_text = (
        "–ß—Ç–æ –¥–∞—é—Ç –∫—Å–µ–Ω–æ–Ω–æ–≤—ã–µ –∏–Ω–≥–∞–ª—è—Ü–∏–∏:\n"
        "‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç—Ä–µ—Å—Å–∞.\n"
        "‚Ä¢ –°–Ω—è—Ç–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏, —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n"
        "‚Ä¢ –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Å–Ω–∏–∂–µ–Ω–∏–µ –º—ã—à–µ—á–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è.\n"
        "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞ –∏ –æ–±—â–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞.\n"
        "‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–µ–∏–Ω–≤–∞–∑–∏–≤–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞."
    )
    await query.message.reply_text(benefits_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é "–í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç"
async def choose_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –∏ —Ü–µ–Ω–∞)
    formats = [
        ("1 —Å–µ—Å—Å–∏—è ‚Äî 40 000 ‚ÇΩ", "format_1"),
        ("3 —Å–µ—Å—Å–∏–∏ ‚Äî 100 000 ‚ÇΩ", "format_3"),
        ("5 —Å–µ—Å—Å–∏–π ‚Äî 150 000 ‚ÇΩ", "format_5"),
        ("8 —Å–µ—Å—Å–∏–π ‚Äî 180 000 ‚ÇΩ", "format_8"),
        ("10 —Å–µ—Å—Å–∏–π ‚Äî 200 000 ‚ÇΩ", "format_10")
    ]
    keyboard = [[InlineKeyboardButton(text, callback_data=data)] for text, data in formats]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä)
async def format_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "format_3"
    sessions_number = data.split('_')[1]  # –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ —Å–µ—Å—Å–∏–π
    mapping = {
        "1": ("1 —Å–µ—Å—Å–∏—è", "40 000 ‚ÇΩ"),
        "3": ("3 —Å–µ—Å—Å–∏–∏", "100 000 ‚ÇΩ"),
        "5": ("5 —Å–µ—Å—Å–∏–π", "150 000 ‚ÇΩ"),
        "8": ("8 —Å–µ—Å—Å–∏–π", "180 000 ‚ÇΩ"),
        "10": ("10 —Å–µ—Å—Å–∏–π", "200 000 ‚ÇΩ")
    }
    label, price = mapping.get(sessions_number, (f"{sessions_number} —Å–µ—Å—Å–∏–π", ""))
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ user_data
    context.user_data['format_label'] = label
    context.user_data['format_price'] = price
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏, –æ—Ç–º–µ—á–∞—è –≤—ã–±–æ—Ä, –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {label} ‚Äî {price}")
    await query.message.reply_text("–§–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è.")

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–ø–∏—Å–∏ (–Ω–∞–∂–∞—Ç–∏–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_signup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    await query.message.reply_text("–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
    return NAME

# –®–∞–≥ 1: –ø–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def name_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    context.user_data['name'] = name
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=reply_markup)
    return PHONE

# –®–∞–≥ 2: –ø–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º)
async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.contact:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
    context.user_data['phone'] = phone
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
    await update.message.reply_text(
        "–ö–æ–≥–¥–∞ –í–∞–º —É–¥–æ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å–µ—Å—Å–∏—é? –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
        reply_markup=ReplyKeyboardRemove()
    )
    return TIME

# –®–∞–≥ 3: –ø–æ–ª—É—á–∞–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è
async def time_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    preferred_time = update.message.text.strip()
    context.user_data['time'] = preferred_time
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω, –≥–¥–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–µ—Å—Å–∏—è.")
    return ADDRESS

# –®–∞–≥ 4: –ø–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å
async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    address = update.message.text.strip()
    context.user_data['address'] = address
    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ä–º–∞—Ç–µ
    if 'format_label' in context.user_data and 'format_price' in context.user_data:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        await update.message.reply_text(
            "–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –Ω–∏–∂–µ.\n"
            "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip."
        )
        return COMMENT
    else:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–µ—Å—Å–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        formats = [
            ("1 —Å–µ—Å—Å–∏—è ‚Äî 40 000 ‚ÇΩ", "format_1"),
            ("3 —Å–µ—Å—Å–∏–∏ ‚Äî 100 000 ‚ÇΩ", "format_3"),
            ("5 —Å–µ—Å—Å–∏–π ‚Äî 150 000 ‚ÇΩ", "format_5"),
            ("8 —Å–µ—Å—Å–∏–π ‚Äî 180 000 ‚ÇΩ", "format_8"),
            ("10 —Å–µ—Å—Å–∏–π ‚Äî 200 000 ‚ÇΩ", "format_10")
        ]
        keyboard = [[InlineKeyboardButton(text, callback_data=data)] for text, data in formats]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã:", reply_markup=reply_markup)
        return FORMAT_STATE

# –®–∞–≥ 5: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞
async def format_handler_conv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "format_5"
    sessions_number = data.split('_')[1]
    mapping = {
        "1": ("1 —Å–µ—Å—Å–∏—è", "40 000 ‚ÇΩ"),
        "3": ("3 —Å–µ—Å—Å–∏–∏", "100 000 ‚ÇΩ"),
        "5": ("5 —Å–µ—Å—Å–∏–π", "150 000 ‚ÇΩ"),
        "8": ("8 —Å–µ—Å—Å–∏–π", "180 000 ‚ÇΩ"),
        "10": ("10 —Å–µ—Å—Å–∏–π", "200 000 ‚ÇΩ")
    }
    label, price = mapping.get(sessions_number, (f"{sessions_number} —Å–µ—Å—Å–∏–π", ""))
    context.user_data['format_label'] = label
    context.user_data['format_price'] = price
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞, —É–∫–∞–∑—ã–≤–∞—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç: {label} ‚Äî {price}")
    if context.user_data.get('editing_field') == 'format':
        # –ï—Å–ª–∏ –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        context.user_data['editing_field'] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç—Ç–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        summary_text = compose_summary(context.user_data, prefix="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n")
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_send")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")]
        ]
        await query.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        await query.message.reply_text(
            "–ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ö –Ω–∏–∂–µ.\n"
            "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /skip."
        )
        return COMMENT

# –®–∞–≥ 6: –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ª–∏–±–æ –∫–æ–º–∞–Ω–¥–∞ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)
async def comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–Ω–µ—Ç" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–µ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç
    if text.lower() in ["–Ω–µ—Ç", "–Ω–µ", "no", "none"]:
        context.user_data['comment'] = ""
    else:
        context.user_data['comment'] = text
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    summary_text = compose_summary(context.user_data)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_send")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")]
    ]
    await update.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /skip (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
async def skip_comment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    context.user_data['comment'] = ""
    summary_text = compose_summary(context.user_data)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_send")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")]
    ]
    await update.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

# –®–∞–≥ 7: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def confirm_send_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    name = context.user_data.get('name')
    phone = context.user_data.get('phone')
    time = context.user_data.get('time')
    address = context.user_data.get('address')
    format_label = context.user_data.get('format_label')
    format_price = context.user_data.get('format_price')
    comment = context.user_data.get('comment') or "(–Ω–µ—Ç)"
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (Telegram)
    user = query.from_user
    username = user.username
    user_id = user.id
    user_info = f"@{username} (ID: {user_id})" if username else f"ID: {user_id}"
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç)
    admin_message = (
        "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ XENON PRIVE üîî\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {time}\n"
        f"–ê–¥—Ä–µ—Å: {address}\n"
        f"–§–æ—Ä–º–∞—Ç: {format_label} ‚Äî {format_price}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram: {user_info}"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
    admin_chat_id = os.getenv("ADMIN_CHAT_ID")
    if admin_chat_id:
        try:
            admin_chat_id_int = int(admin_chat_id)
        except ValueError:
            admin_chat_id_int = admin_chat_id  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ chat_id –Ω–µ —á–∏—Å–ª–æ–≤–æ–π
        try:
            await context.bot.send_message(chat_id=admin_chat_id_int, text=admin_message)
        except Exception as e:
            logging.error(f"Failed to send admin message: {e}")
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    await query.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=ReplyKeyboardRemove())
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    context.user_data.clear()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def edit_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–æ —Å–≤–æ–¥–∫–æ–π
    await query.edit_message_reply_markup(reply_markup=None)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("–ò–º—è", callback_data="edit_name"), InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone")],
        [InlineKeyboardButton("–í—Ä–µ–º—è", callback_data="edit_time"), InlineKeyboardButton("–ê–¥—Ä–µ—Å", callback_data="edit_address")],
        [InlineKeyboardButton("–§–æ—Ä–º–∞—Ç", callback_data="edit_format"), InlineKeyboardButton("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_comment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_confirm")]
    ]
    await query.message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSE_FIELD

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def choose_field_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "edit_phone" –∏–ª–∏ "back_to_confirm"
    if data == "back_to_confirm":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        summary_text = compose_summary(context.user_data)
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_send")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")]
        ]
        await query.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM
    # –ò–Ω–∞—á–µ, –≤—ã–±—Ä–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    field = data.split('_')[1]  # –ø–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "edit_"
    context.user_data['editing_field'] = field
    if field == "format":
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞: —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤
        formats = [
            ("1 —Å–µ—Å—Å–∏—è ‚Äî 40", "format_1"),
            ("3 —Å–µ—Å—Å–∏–∏ ‚Äî 100", "format_3"),
            ("5 —Å–µ—Å—Å–∏–π ‚Äî 150", "format_5"),
            ("8 —Å–µ—Å—Å–∏–π ‚Äî 180", "format_8"),
            ("10 —Å–µ—Å—Å–∏–π ‚Äî 200", "format_10")
        ]
        keyboard = [[InlineKeyboardButton(text, callback_data=data)] for text, data in formats]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:", reply_markup=InlineKeyboardMarkup(keyboard))
        return FORMAT_STATE
    else:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if field == "name":
            prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:"
        elif field == "phone":
            prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        elif field == "time":
            prompt = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:"
        elif field == "address":
            prompt = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω:"
        elif field == "comment":
            prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):"
        else:
            prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        await query.message.reply_text(prompt)
        return NEW_VALUE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
async def new_value_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_text = update.message.text.strip()
    field = context.user_data.get('editing_field')
    if field:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if field == "name":
            context.user_data['name'] = new_text
        elif field == "phone":
            context.user_data['phone'] = new_text
        elif field == "time":
            context.user_data['time'] = new_text
        elif field == "address":
            context.user_data['address'] = new_text
        elif field == "comment":
            context.user_data['comment'] = new_text
        context.user_data['editing_field'] = None
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    summary_text = compose_summary(context.user_data, prefix="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n")
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="confirm_send")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")]
    ]
    await update.message.reply_text(summary_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å. –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.",
            reply_markup=ReplyKeyboardRemove()
        )
    context.user_data.clear()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /cancel –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ (–æ–±—â–∏–π)
async def cancel_command_global(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.", reply_markup=ReplyKeyboardRemove())

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    token = os.getenv("BOT_TOKEN")
    if not token:
        logging.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel_command_global))
    application.add_handler(CallbackQueryHandler(about_info, pattern="^about$"))
    application.add_handler(CallbackQueryHandler(benefits_info, pattern="^benefits$"))
    application.add_handler(CallbackQueryHandler(choose_format, pattern="^choose_format$"))
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞)
    # block=False –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–∏–∞–ª–æ–≥–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–∏ –∂–µ callback, –∫–æ–≥–¥–∞ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    application.add_handler(CallbackQueryHandler(format_selection, pattern="^format_(1|3|5|8|10)$", block=False))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ª–æ–≥ (ConversationHandler) –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_signup, pattern="^signup$")],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_handler)],
            PHONE: [
                MessageHandler(filters.CONTACT, phone_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler)
            ],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_handler)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler)],
            FORMAT_STATE: [CallbackQueryHandler(format_handler_conv, pattern="^format_")],
            COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, comment_handler)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_send_handler, pattern="^confirm_send$"),
                CallbackQueryHandler(edit_data_handler, pattern="^edit_data$")
            ],
            CHOOSE_FIELD: [CallbackQueryHandler(choose_field_handler, pattern="^(edit_|back_to_confirm)")],
            NEW_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, new_value_handler)]
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("skip", skip_comment_handler)],
        allow_reentry=True
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–¥–æ–ª–≥–æ–ø–æ–ª–ª–∏–Ω–≥)
    logging.info("Bot is starting polling...")
    application.run_polling()

if __name__ == "__main__":
    main()
